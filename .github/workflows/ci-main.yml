name: CI - Main
on:
  push:
    branches: [ ]

jobs:
  build:
    name: "Build and Test"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build base image
        run: |
          docker build -t ghcr.io/raynigon/raylevation-gdal-base:3.4.3 .
      - name: Gradle Command - test
        run: >
          docker run --rm 
          -w /app
          -v $(pwd):/app 
          -v ~/.gradle:/root/.gradle 
          ghcr.io/raynigon/raylevation-gdal-base:3.4.3
          ./gradlew clean test
      - name: Codacy Publish
        uses: codacy/codacy-coverage-reporter-action@master
        if: github.actor != 'dependabot[bot]'
        with:
          project-token: ${{ secrets.CODACY_TOKEN }}

  static_analysis:
    name: "Static Code Analysis"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Kotlin Linter
        uses: eskatos/gradle-command-action@v1.3.2
        with:
          arguments: ktlintCheck
      - name: Checkstyle Linter
        uses: eskatos/gradle-command-action@v1.3.2
        with:
          arguments: checkstyleMain
      - name: PMD Linter
        uses: eskatos/gradle-command-action@v1.3.2
        with:
          arguments: pmdMain
      - uses: jwgmeligmeyling/checkstyle-github-action@master
        with:
          path: '**/checkstyle/main.xml'
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        with:
          tool: spotbugs
          project-token: ${{ secrets.CODACY_TOKEN }}
          upload: true
          max-allowed-issues: 2147483647

  docker:
    name: "Build Docker Image"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: "ghcr.io"
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Gradle Command - jibDockerBuild
        if: github.actor != 'dependabot[bot]'
        uses: eskatos/gradle-command-action@v1.3.3
        with:
          arguments: jibDockerBuild -x check
          wrapper-cache-enabled: true
          dependencies-cache-enabled: true
      - name: Test Docker Image
        run: ".github/scripts/test-docker-image.sh"
        timeout-minutes: 5

  dokka:
    name: "Code Documentation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Generate javadoc
        uses: eskatos/gradle-command-action@v1.3.2
        with:
          arguments: dokkaHtml
      - name: Upload Dokka
        uses: sebastianpopp/ftp-action@releases/v2
        if: github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/')
        with:
          host: ${{ secrets.WEBSPACE_HOST }}
          user: ${{ secrets.WEBSPACE_USER }}
          password: ${{ secrets.WEBSPACE_PASSWORD }}
          localDir: "build/dokka/html/"
          remoteDir: "dokka/"

  documentation:
    name: "User Documentation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - run: pip3 install -r requirements.txt
      - run: mkdocs build -d build/site/
      - name: Upload documentation
        uses: sebastianpopp/ftp-action@releases/v2
        if: github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/')
        with:
          host: ${{ secrets.WEBSPACE_HOST }}
          user: ${{ secrets.WEBSPACE_USER }}
          password: ${{ secrets.WEBSPACE_PASSWORD }}
          localDir: "build/site/"
          remoteDir: "."

  deployment_linting:
    name: "Deployment Linting"
    runs-on: ubuntu-latest
    concurrency:
      group: "linting-k8s-${{ github.ref }}"
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v2
      - name: "Register Matchers"
        run: echo "::add-matcher::.github/matchers/kube-linter.json"
      - name: Scan yamls
        id: kube-lint-scan
        uses: stackrox/kube-linter-action@v1
        with:
          directory: deployment/k8s/
          # config: .kube-linter/config.yaml
